; Also defines MODULENAME:KERNEL32 and modulename:kernel32
SetMacroMulticase  = ModuleName:Kernel32


; Generate 
; #define KERNEL32_HOOK_CONFIG_OPT_NAME 0/1
; for ForwardData/ForwardEllipsis/GenerateCustomHandler options
ConfigDefPrefix                          = $(MODULENAME)_HOOK_CONFIG_

; Generate KERNEL32_HOOK_CONFIG_XXX only for active options (for true values)
ConfigDefOnlyForActiveOption             = true
; ConfigDefOnlyForActiveOption             = false

; Function index in table s macro name format
FunctionIndexConstantNameFormat          = $(MODULENAME)_HOOK_FN_IDX_$(FUNCTIONNAME)

;
EllipsisImplFormat                       = $(MODULENAME)_HOOK_ELLIPSIS_IMPL_$(FUNCTIONNAME)()
ProxyFunctionImplementationPrefix        = $(MODULENAME)_HOOK_EXPORT
ProxyDataFormat                          = $(MODULENAME)_HOOK_EXPORT_DATA $(MODULENAME)_HOOK_DATA_$(DATANAME)()

; Prefix for fnTable$(ModuleName)Pointers and fnTable$(ModuleName)Names
ProxyImplArrayNamesPrefix                = fnTable$(ModuleName)

FunctionPtrTypeFormat                    = $(FunctionName)_fn_ptr_t
GetOriginalFunctionPtrFuncTemplateName   = getOriginal$(ModuleName)FunctionPtr
; Used for hook
getOriginalFunctionFarprocPtrFuncName    = getOriginal$(ModuleName)FunctionFarprocPtr

HookFunctionNameFormat                   = hook_$(FunctionName)

; HookDll/ProxyDll 
Dll                     = $(modulename)_hooks
; Proxy ForwardTarget Dll/Dll with original function for hook
ForwardTarget           = $(modulename)

ForwardData             = true
; ForwardData             = false
ForwardEllipsis         = true
;ForwardEllipsis         = false
; ForwardList             = sqlite3_aggregate_count


ProxyHelo               = $(MODULENAME)_HOOK_TRACE(("!!! Hook called: %s\n", "$(FunctionName)"))
GenerateProxyHelo       = true

; For proxy DLL, use LoadLibrary (UseLoadLibrary=true) to explicit load ForwardTarget DLL
; For hook  DLL, use GetModuleHandle (UseLoadLibrary=false) to get handle of already loaded module
;    In this case ForwardTarget DLL must be one of well known preloaded DLLs, or must be explicitly
;    linked to the hook DLL
UseLoadLibrary          = false


CustomHandlerFormat     = $(MODULENAME)_HOOK_HANDLE_$(FUNCTIONNAME)
GenerateCustomHandler   = true

hookInitStartFormat     = DetourTransactionBegin(); DetourUpdateThread(GetCurrentThread())
hookInitEndFormat       = DetourTransactionCommit()
hookInitFormat          = $(FunctionPointersTable)[$(FunctionIndex)] = $(GetFunctionFarprocPtr)($(FunctionIndex)); DetourAttach(&(PVOID&)$(FunctionPointersTable)[$(FunctionIndex)], (PVOID)$(HookFunctionName))

hookDeinitStartFormat   = DetourTransactionBegin(); DetourUpdateThread(GetCurrentThread())
hookDeinitEndFormat     = DetourTransactionCommit()
hookDeinitFormat        = DetourDetach(&(PVOID&)$(FunctionPointersTable)[$(FunctionIndex)], (PVOID)$(HookFunctionName))

